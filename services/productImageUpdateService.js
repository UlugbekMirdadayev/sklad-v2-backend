const cron = require("node-cron");
const Product = require("../models/products/product.model");
const { getFileUrlFromTelegram } = require("../config/tg");

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ URL-–∞–¥—Ä–µ—Å–æ–º
 * @param {string} str - –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} true –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è URL
 */
const isURL = (str) => {
  return (
    typeof str === "string" &&
    (str.startsWith("http://") || str.startsWith("https://"))
  );
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º Telegram file_id
 * @param {string} str - –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} true –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å file_id
 */
const isValidFileId = (str) => {
  return typeof str === "string" && !isURL(str) && str.length > 0;
};

class ProductImageUpdateService {
  constructor() {
    this.isRunning = false;
    this.cronTask = null;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç fileURL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
   * @param {Object} product - –û–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
   * @returns {Promise<boolean>} - true –µ—Å–ª–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  async updateSingleProductImageUrls(product) {
    if (!product || !product.images || product.images.length === 0) {
      return false;
    }

    let needsUpdate = false;
    const updatedImages = [];

    for (const image of product.images) {
      if (image.file_id && isValidFileId(image.file_id)) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π URL –∏–∑ Telegram
          const freshFileURL = await getFileUrlFromTelegram(image.file_id);

          // –ï—Å–ª–∏ URL –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º
          if (freshFileURL !== image.fileURL) {
            updatedImages.push({
              ...(image.toObject ? image.toObject() : image),
              fileURL: freshFileURL,
            });
            needsUpdate = true;
            console.log(`–û–±–Ω–æ–≤–ª–µ–Ω URL –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${product._id}, file_id: ${image.file_id}`);
          } else {
            updatedImages.push(image);
          }
        } catch (error) {
          console.warn(
            `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å URL –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${product._id}, file_id ${image.file_id}:`,
            error.message
          );
          updatedImages.push(image); // –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π URL
        }
      } else {
        updatedImages.push(image); // –ï—Å–ª–∏ –Ω–µ—Ç file_id, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      }
    }

    // –ï—Å–ª–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if (needsUpdate && product._id) {
      try {
        await Product.findByIdAndUpdate(product._id, { images: updatedImages });
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${product._id} (${product.name})`);
        return true;
      } catch (error) {
        console.error(
          `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ URL –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${product._id}:`,
          error.message
        );
        return false;
      }
    }

    return false;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   */
  async updateAllProductImageUrls() {
    try {
      console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤...");

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ—É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
      const products = await Product.find({
        isDeleted: false,
        "images.0": { $exists: true }, // –¢–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
      });

      console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏`);

      let updatedCount = 0;
      let errorCount = 0;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–∞—Ä—Ç–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å Telegram API
      const batchSize = 10; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
      
      for (let i = 0; i < products.length; i += batchSize) {
        const batch = products.slice(i, i + batchSize);
        
        const batchPromises = batch.map(async (product) => {
          try {
            const wasUpdated = await this.updateSingleProductImageUrls(product);
            if (wasUpdated) {
              updatedCount++;
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${product._id}:`, error.message);
            errorCount++;
          }
        });

        await Promise.all(batchPromises);

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—Ä—Ç–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å Telegram API
        if (i + batchSize < products.length) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }

      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ:`);
      console.log(`   - –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${products.length}`);
      console.log(`   - –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`);
      console.log(`   - –û—à–∏–±–æ–∫: ${errorCount}`);

      return {
        success: true,
        totalProcessed: products.length,
        totalUpdated: updatedCount,
        totalErrors: errorCount
      };

    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç cron job –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
   */
  startScheduledUpdates() {
    if (this.isRunning) {
      console.log("üì∏ Product image update service —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
      return;
    }

    // –°–æ–∑–¥–∞–µ–º cron job –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ (–≤ 00:00, 04:00, 08:00, 12:00, 16:00, 20:00)
    this.cronTask = cron.schedule(
      "0 0,4,8,12,16,20 * * *",
      async () => {
        console.log("‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤");
        await this.updateAllProductImageUrls();
      },
      {
        scheduled: false,
        timezone: "Asia/Tashkent",
      }
    );

    // –ó–∞–ø—É—Å–∫–∞–µ–º task
    this.cronTask.start();

    this.isRunning = true;
    console.log("üì∏ Product Image Update Service –∑–∞–ø—É—â–µ–Ω!");
    console.log("‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞");
    console.log("   - –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: 00:00, 04:00, 08:00, 12:00, 16:00, 20:00 (–¢–∞—à–∫–µ–Ω—Ç)");
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    setTimeout(async () => {
      console.log("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...");
      await this.updateAllProductImageUrls();
    }, 60000); // 60 —Å–µ–∫—É–Ω–¥
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç cron job
   */
  stopScheduledUpdates() {
    if (!this.isRunning) {
      console.log("üì∏ Product image update service –Ω–µ –∑–∞–ø—É—â–µ–Ω");
      return;
    }

    if (this.cronTask) {
      this.cronTask.destroy();
      this.cronTask = null;
    }

    this.isRunning = false;
    console.log("üì∏ Product Image Update Service –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      schedule: "0 0,4,8,12,16,20 * * *", // –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
      timezone: "Asia/Tashkent",
      description: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞",
      nextExecutions: [
        "00:00", "04:00", "08:00", "12:00", "16:00", "20:00"
      ]
    };
  }

  /**
   * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async manualUpdate() {
    console.log("üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤");
    return await this.updateAllProductImageUrls();
  }
}

module.exports = new ProductImageUpdateService();
